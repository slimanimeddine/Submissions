{"ast":null,"code":"import { createSlice, createAsyncThunk, createEntityAdapter } from '@reduxjs/toolkit';\nimport blogService from '../services/blogs';\nconst blogsAdapter = createEntityAdapter({\n  sortComparer: (a, b) => a.likes - b.likes\n});\nconst initialState = blogsAdapter.getInitialState({\n  status: 'idle',\n  error: null\n});\nexport const fetchBlogs = createAsyncThunk('blogs/fetchBlogs', blogService.getAll);\nexport const addNewBlog = createAsyncThunk('blogs/addNewBlog', async initialBlog => {\n  await blogService.create(initialBlog);\n});\nconst blogsSlice = createSlice({\n  name: 'blogs',\n  initialState,\n  reducers: {},\n\n  extraReducers(builder) {\n    builder.addCase(fetchBlogs.pending, (state, action) => {\n      state.status = 'loading';\n    }).addCase(fetchBlogs.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      blogsAdapter.upsertMany(state, action.payload);\n    }).addCase(fetchBlogs.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(addNewBlog.fulfilled, (state, action) => {\n      blogsAdapter.addOne(state, action.payload);\n      state.status = 'idle';\n    });\n  }\n\n});\nexport const {\n  likesIncremented\n} = blogsSlice.actions;\nexport default blogsSlice.reducer;\nexport const {\n  selectAll: selectAllBlogs,\n  selectById: selectBlogById,\n  selectIds: selectBlogIds\n} = blogsAdapter.getSelectors(state => state.blogs);","map":{"version":3,"sources":["/home/slimanimeddine/devstuff/Submissions/part7/bloglist-frontend/src/slices/blogsSlice.js"],"names":["createSlice","createAsyncThunk","createEntityAdapter","blogService","blogsAdapter","sortComparer","a","b","likes","initialState","getInitialState","status","error","fetchBlogs","getAll","addNewBlog","initialBlog","create","blogsSlice","name","reducers","extraReducers","builder","addCase","pending","state","action","fulfilled","upsertMany","payload","rejected","message","addOne","likesIncremented","actions","reducer","selectAll","selectAllBlogs","selectById","selectBlogById","selectIds","selectBlogIds","getSelectors","blogs"],"mappings":"AAAA,SACIA,WADJ,EAEIC,gBAFJ,EAGIC,mBAHJ,QAIO,kBAJP;AAMA,OAAOC,WAAP,MAAwB,mBAAxB;AAEA,MAAMC,YAAY,GAAGF,mBAAmB,CAAC;AACrCG,EAAAA,YAAY,EAAE,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACE,KAAF,GAAUD,CAAC,CAACC;AADC,CAAD,CAAxC;AAIA,MAAMC,YAAY,GAAGL,YAAY,CAACM,eAAb,CAA6B;AAC9CC,EAAAA,MAAM,EAAE,MADsC;AAE9CC,EAAAA,KAAK,EAAE;AAFuC,CAA7B,CAArB;AAKA,OAAO,MAAMC,UAAU,GAAGZ,gBAAgB,CAAC,kBAAD,EAAqBE,WAAW,CAACW,MAAjC,CAAnC;AAGP,OAAO,MAAMC,UAAU,GAAGd,gBAAgB,CAAC,kBAAD,EAAqB,MAAMe,WAAN,IAAqB;AAChF,QAAMb,WAAW,CAACc,MAAZ,CAAmBD,WAAnB,CAAN;AACH,CAFyC,CAAnC;AAIP,MAAME,UAAU,GAAGlB,WAAW,CAAC;AAC3BmB,EAAAA,IAAI,EAAE,OADqB;AAE3BV,EAAAA,YAF2B;AAG3BW,EAAAA,QAAQ,EAAE,EAHiB;;AAI3BC,EAAAA,aAAa,CAAEC,OAAF,EAAW;AACpBA,IAAAA,OAAO,CACFC,OADL,CACaV,UAAU,CAACW,OADxB,EACiC,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC5CD,MAAAA,KAAK,CAACd,MAAN,GAAe,SAAf;AACH,KAHL,EAIKY,OAJL,CAIaV,UAAU,CAACc,SAJxB,EAImC,CAACF,KAAD,EAAQC,MAAR,KAAmB;AAC9CD,MAAAA,KAAK,CAACd,MAAN,GAAe,WAAf;AACAP,MAAAA,YAAY,CAACwB,UAAb,CAAwBH,KAAxB,EAA+BC,MAAM,CAACG,OAAtC;AACH,KAPL,EAQKN,OARL,CAQaV,UAAU,CAACiB,QARxB,EAQkC,CAACL,KAAD,EAAQC,MAAR,KAAmB;AAC7CD,MAAAA,KAAK,CAACd,MAAN,GAAe,QAAf;AACAc,MAAAA,KAAK,CAACb,KAAN,GAAcc,MAAM,CAACd,KAAP,CAAamB,OAA3B;AACH,KAXL,EAYKR,OAZL,CAYaR,UAAU,CAACY,SAZxB,EAYmC,CAACF,KAAD,EAAQC,MAAR,KAAmB;AAC9CtB,MAAAA,YAAY,CAAC4B,MAAb,CAAoBP,KAApB,EAA2BC,MAAM,CAACG,OAAlC;AACAJ,MAAAA,KAAK,CAACd,MAAN,GAAe,MAAf;AACH,KAfL;AAgBH;;AArB0B,CAAD,CAA9B;AAwBA,OAAO,MAAM;AAAEsB,EAAAA;AAAF,IAAuBf,UAAU,CAACgB,OAAxC;AAEP,eAAehB,UAAU,CAACiB,OAA1B;AAEA,OAAO,MAAM;AACTC,EAAAA,SAAS,EAAEC,cADF;AAETC,EAAAA,UAAU,EAAEC,cAFH;AAGTC,EAAAA,SAAS,EAAEC;AAHF,IAITrC,YAAY,CAACsC,YAAb,CAA0BjB,KAAK,IAAIA,KAAK,CAACkB,KAAzC,CAJG","sourcesContent":["import {\n    createSlice,\n    createAsyncThunk,\n    createEntityAdapter\n} from '@reduxjs/toolkit'\n\nimport blogService from '../services/blogs'\n\nconst blogsAdapter = createEntityAdapter({\n    sortComparer: (a, b) => a.likes - b.likes\n})\n\nconst initialState = blogsAdapter.getInitialState({\n    status: 'idle',\n    error: null\n})\n\nexport const fetchBlogs = createAsyncThunk('blogs/fetchBlogs', blogService.getAll)\n\n\nexport const addNewBlog = createAsyncThunk('blogs/addNewBlog', async initialBlog => {\n    await blogService.create(initialBlog)\n})\n\nconst blogsSlice = createSlice({\n    name: 'blogs',\n    initialState,\n    reducers: {},\n    extraReducers (builder) {\n        builder\n            .addCase(fetchBlogs.pending, (state, action) => {\n                state.status = 'loading'\n            })\n            .addCase(fetchBlogs.fulfilled, (state, action) => {\n                state.status = 'succeeded'\n                blogsAdapter.upsertMany(state, action.payload)\n            })\n            .addCase(fetchBlogs.rejected, (state, action) => {\n                state.status = 'failed'\n                state.error = action.error.message\n            })\n            .addCase(addNewBlog.fulfilled, (state, action) => {\n                blogsAdapter.addOne(state, action.payload)\n                state.status = 'idle'\n            })\n    }\n})\n\nexport const { likesIncremented } = blogsSlice.actions\n\nexport default blogsSlice.reducer\n\nexport const {\n    selectAll: selectAllBlogs,\n    selectById: selectBlogById,\n    selectIds: selectBlogIds\n} = blogsAdapter.getSelectors(state => state.blogs)"]},"metadata":{},"sourceType":"module"}