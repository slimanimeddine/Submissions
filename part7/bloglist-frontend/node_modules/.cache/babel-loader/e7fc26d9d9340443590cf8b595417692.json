{"ast":null,"code":"// eslint-disable-next-line no-unused-vars\nimport { createSlice, createAsyncThunk, createEntityAdapter } from '@reduxjs/toolkit';\nimport blogService from '../services/blogs';\nconst blogsAdapter = createEntityAdapter({\n  sortComparer: (a, b) => a.likes - b.likes\n});\nconst initialState = blogsAdapter.getInitialState({\n  status: 'idle',\n  error: null\n});\nexport const fetchBlogs = createAsyncThunk('blogs/fetchBlogs', blogService.getAll);\nexport const addNewBlog = createAsyncThunk('blogs/addNewBlog', blogService.create());\nconst blogsSlice = createSlice({\n  name: 'blogs',\n  initialState,\n  reducers: {\n    likesIncremented(state, action) {\n      const {\n        blogId\n      } = action.payload;\n      const existingBlog = state.entities[blogId];\n\n      if (existingBlog) {\n        existingBlog.likes++;\n      }\n    }\n\n  },\n\n  extraReducers(builder) {\n    builder.addCase(fetchBlogs.pending, (state, action) => {\n      state.status = 'loading';\n    }).addCase(fetchBlogs.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      blogsAdapter.upsertMany(state, action.payload);\n    }).addCase(fetchBlogs.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(addNewBlog.fulfilled, blogsAdapter.addOne);\n  }\n\n});\nexport const {\n  likesIncremented\n} = blogsSlice.actions;\nexport default blogsSlice.reducer;\nexport const {\n  selectAll: selectAllBlogs,\n  selectById: selectBlogById,\n  selectIds: selectBlogIds\n} = blogsAdapter.getSelectors(state => state.blogs);","map":{"version":3,"sources":["/home/slimanimeddine/devstuff/Submissions/part7/bloglist-frontend/src/slices/blogsSlice.js"],"names":["createSlice","createAsyncThunk","createEntityAdapter","blogService","blogsAdapter","sortComparer","a","b","likes","initialState","getInitialState","status","error","fetchBlogs","getAll","addNewBlog","create","blogsSlice","name","reducers","likesIncremented","state","action","blogId","payload","existingBlog","entities","extraReducers","builder","addCase","pending","fulfilled","upsertMany","rejected","message","addOne","actions","reducer","selectAll","selectAllBlogs","selectById","selectBlogById","selectIds","selectBlogIds","getSelectors","blogs"],"mappings":"AAAA;AACA,SACIA,WADJ,EAEIC,gBAFJ,EAGIC,mBAHJ,QAIO,kBAJP;AAMA,OAAOC,WAAP,MAAwB,mBAAxB;AAEA,MAAMC,YAAY,GAAGF,mBAAmB,CAAC;AACrCG,EAAAA,YAAY,EAAE,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACE,KAAF,GAAUD,CAAC,CAACC;AADC,CAAD,CAAxC;AAIA,MAAMC,YAAY,GAAGL,YAAY,CAACM,eAAb,CAA6B;AAC9CC,EAAAA,MAAM,EAAE,MADsC;AAE9CC,EAAAA,KAAK,EAAE;AAFuC,CAA7B,CAArB;AAKA,OAAO,MAAMC,UAAU,GAAGZ,gBAAgB,CAAC,kBAAD,EAAqBE,WAAW,CAACW,MAAjC,CAAnC;AAGP,OAAO,MAAMC,UAAU,GAAGd,gBAAgB,CAAC,kBAAD,EAAqBE,WAAW,CAACa,MAAZ,EAArB,CAAnC;AAEP,MAAMC,UAAU,GAAGjB,WAAW,CAAC;AAC3BkB,EAAAA,IAAI,EAAE,OADqB;AAE3BT,EAAAA,YAF2B;AAG3BU,EAAAA,QAAQ,EAAE;AACNC,IAAAA,gBAAgB,CAAEC,KAAF,EAASC,MAAT,EAAiB;AAC7B,YAAM;AAAEC,QAAAA;AAAF,UAAaD,MAAM,CAACE,OAA1B;AACA,YAAMC,YAAY,GAAGJ,KAAK,CAACK,QAAN,CAAeH,MAAf,CAArB;;AACA,UAAIE,YAAJ,EAAkB;AACdA,QAAAA,YAAY,CAACjB,KAAb;AACH;AACJ;;AAPK,GAHiB;;AAY3BmB,EAAAA,aAAa,CAAEC,OAAF,EAAW;AACpBA,IAAAA,OAAO,CACFC,OADL,CACahB,UAAU,CAACiB,OADxB,EACiC,CAACT,KAAD,EAAQC,MAAR,KAAmB;AAC5CD,MAAAA,KAAK,CAACV,MAAN,GAAe,SAAf;AACH,KAHL,EAIKkB,OAJL,CAIahB,UAAU,CAACkB,SAJxB,EAImC,CAACV,KAAD,EAAQC,MAAR,KAAmB;AAC9CD,MAAAA,KAAK,CAACV,MAAN,GAAe,WAAf;AACAP,MAAAA,YAAY,CAAC4B,UAAb,CAAwBX,KAAxB,EAA+BC,MAAM,CAACE,OAAtC;AACH,KAPL,EAQKK,OARL,CAQahB,UAAU,CAACoB,QARxB,EAQkC,CAACZ,KAAD,EAAQC,MAAR,KAAmB;AAC7CD,MAAAA,KAAK,CAACV,MAAN,GAAe,QAAf;AACAU,MAAAA,KAAK,CAACT,KAAN,GAAcU,MAAM,CAACV,KAAP,CAAasB,OAA3B;AACH,KAXL,EAYKL,OAZL,CAYad,UAAU,CAACgB,SAZxB,EAYmC3B,YAAY,CAAC+B,MAZhD;AAaH;;AA1B0B,CAAD,CAA9B;AA6BA,OAAO,MAAM;AAAEf,EAAAA;AAAF,IAAuBH,UAAU,CAACmB,OAAxC;AAEP,eAAenB,UAAU,CAACoB,OAA1B;AAEA,OAAO,MAAM;AACTC,EAAAA,SAAS,EAAEC,cADF;AAETC,EAAAA,UAAU,EAAEC,cAFH;AAGTC,EAAAA,SAAS,EAAEC;AAHF,IAITvC,YAAY,CAACwC,YAAb,CAA0BvB,KAAK,IAAIA,KAAK,CAACwB,KAAzC,CAJG","sourcesContent":["// eslint-disable-next-line no-unused-vars\nimport {\n    createSlice,\n    createAsyncThunk,\n    createEntityAdapter\n} from '@reduxjs/toolkit'\n\nimport blogService from '../services/blogs'\n\nconst blogsAdapter = createEntityAdapter({\n    sortComparer: (a, b) => a.likes - b.likes\n})\n\nconst initialState = blogsAdapter.getInitialState({\n    status: 'idle',\n    error: null\n})\n\nexport const fetchBlogs = createAsyncThunk('blogs/fetchBlogs', blogService.getAll)\n\n\nexport const addNewBlog = createAsyncThunk('blogs/addNewBlog', blogService.create())\n\nconst blogsSlice = createSlice({\n    name: 'blogs',\n    initialState,\n    reducers: {\n        likesIncremented (state, action) {\n            const { blogId } = action.payload\n            const existingBlog = state.entities[blogId]\n            if (existingBlog) {\n                existingBlog.likes++\n            }\n        }\n    },\n    extraReducers (builder) {\n        builder\n            .addCase(fetchBlogs.pending, (state, action) => {\n                state.status = 'loading'\n            })\n            .addCase(fetchBlogs.fulfilled, (state, action) => {\n                state.status = 'succeeded'\n                blogsAdapter.upsertMany(state, action.payload)\n            })\n            .addCase(fetchBlogs.rejected, (state, action) => {\n                state.status = 'failed'\n                state.error = action.error.message\n            })\n            .addCase(addNewBlog.fulfilled, blogsAdapter.addOne)\n    }\n})\n\nexport const { likesIncremented } = blogsSlice.actions\n\nexport default blogsSlice.reducer\n\nexport const {\n    selectAll: selectAllBlogs,\n    selectById: selectBlogById,\n    selectIds: selectBlogIds\n} = blogsAdapter.getSelectors(state => state.blogs)"]},"metadata":{},"sourceType":"module"}